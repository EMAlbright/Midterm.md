
Q1.) C

Q2.) A

Q3.) E

Q4.) B

Q5.) B

Q6.) foo(10.0, 20.5) = 30.5
     foo(3, 4) = 13
     foo(8, 3.0) = An error since one method takes two integers and the other method takes two doubles. However,
     there is no argument for an integer and then a double.

Q7.) These 2 methods are overloaded. This is because when a method is overriding another method, they have the same 
     method signature. In the two methods above, the top method 'foo' takes in 2 integers while the bottom method 'foo'
     takes in 2 doubles.


Q8.) Super calls the constructor that is defined in the parent class of Cat.

Q9.) The data type: Animal
        
     for(int i = 0; i < pets.length; i++) {
          pets[i].sleep();
     }
 
 Q10.) The 'abstract' word is necessary to create an outline of parent class methods for our child classes MovieAction
       and MovieComedy. Then, we used the keyword 'Super' to call the constructors from the abstract parent class
       Movie.
       
 Q11.) Binary search cuts the number of elements in half after each iteration. 
 Since the array is assumed to be sorted, the target number is either greater or smaller everytime. 
 The Linear search checks every element until target number is found. So, the worst case for binary search is O(log n) 
 (found online the time complexity of binary) while linear search is O(n) (linear time complexity). 
 For example, if an array has 100 elements, linear search would take at worst 100 iterations. However,
 Binary search would take at worst ~6.5 iterations. So, binary search is much better at handling large arrays and has
 a much faster or more efficient time complexity.
 
 Q12.)  public static boolean isSymmetrical(int[] data) {
        if(data == null || data.length == 0){
            return true;
        }

        if(data.length == 1){
            return true;
        }

        int last = data.length - 1;
        int middle = data.length / 2;

        for (int i = 0; i < middle; i++) {
            if (data[i] != data[last - i]) {
                return false;
            }
        }
        return true;
    }
    
    
 Q13.) @Test
    public void testInputs() {
        int[][] inputs = {
                {},
                {1, 2, 3, 2, 1},
                {1, 2, 3, 4},
                {3},
                {3, 3},
                {8, 2, 3, 3, 2, 8},
                {2, 3},
                {1, 2, 3, 3, 1},
        };

        boolean[][] expects = {
                {true},
                {true},
                {false},
                {true},
                {true},
                {true},
                {false},
                {false},
        };

        for(int i = 0; i < inputs.length; i++) {
            boolean actual = isSymmetrical(inputs[i]);
            assertEquals(expects[i][0], actual);
        }

    }
          
 Q14.) (Used StackOverflow):
        A new arrayList is created and the old data is copied over to the new ArrayList which has a greater capacity.
        
 Q15.)
          public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
    
    
 Q16.) First I would tell Jerry that there is not enough test cases to assume that the bubble sort method is correct. From 
 our lecture, it is possible that if you have the 'largest' integer at say index 3, then a smaller integer at index 4, than a
 larger integer at index 5 (larger than index 3), the bubble sort method could not compare the last index with the technically 
 'largest' integer at  index 3.
 
 Q17.) 
 
 
 
 
 Q18.) No, the minimum amount of time that is possible is 27 minutes, so they cannot cross. First, A and B (the two fastest)
 would cross the bridge (total = 2 min). Then, A would come back (total = 3 min). Next, C and D (two slowest) would cross
 (total = 23 minutes). Then, B would come back (total = 25 minutes). Finally, A and B would come back across (total = 27 mintues).
 Even if A stayed originally and B came back instead of A, the total would still be 27 minutes.
 
 
 Q19.) The toString() function return a string of data from a name card object. Even if the toString() method is removed
       there would be a default toString() built in when trying to print a name card object.
       
       (Found from StackOverflow)
       @Override overrides a method from the parent class. If there is none in parent class, than removing @Override
       does not do anything. If there is a toString() in the parent class, than the parent class method is executed.
 
 Q20.) a.) If the input arrays length is 0 or null than the method returns -1. findSomething uses a for loop to iterate
       through each element of input array and compares integer value at idx to current value at i, and returns the element 
       where the smallest integer is held.
       
           (Used GPT to find this issue)
       b.) Since the if statement checks if the length is 0 before if the input is null, which will result in NullPointerException.
       To fix this issue, you should place input == null before input.length == 0
       
      c.) int[][] inputs = {
                {},
                {1, 2, 3, 4, -1},
                {5, 4, 8, 10},
        };

        int[][] expects = {
                {-1},
                {4},
                {1},
        };
        
        
      d.)   public static int findSomething(final int[] input) {
      
        if (input.length == 0 || input == null) {
            return -1;
        }

        int idx = 0;
        if(input.length % 2 == 0) {
          for (int i = 1; i < input.length; i++) {
            if (input[idx] > input[i]) {
                idx = i;
            }
        }
        return idx;
       }
       return idx;
    }
  
  Q21.) (Got information from Stackoverflow)
         Private variables can obly be accessed from within that class. However, protected variables can be seen by subclasses
         of that certain class. So, in our lecture when we used Animal class would could access these protected variables
         from our subclasses (or child classes) Cat, Dog, Rabbit, etc.
       
  Extra Credit 1: I would reply by saying that
   
  Extra Credit 2: Fast and Furious was mentioned because at the end when Paul Walker and Vin Diesel drive off,
                  one of them goes linearly and the other goes on a slight curve. This represents the Big O of
                  O(n) and I believe the curve is O(n^2). And that they will never see each other again :(
 
